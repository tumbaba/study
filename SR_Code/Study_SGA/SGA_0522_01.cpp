#include "stdafx.h" // <iostream> = std::coud, std::cin

// C++ Statements (명령문)




	//변수 사용
	int age = 20; 

	std::cout << 
		"화면 출력 하기"; // 하나의 명령문

	// 조건문
	if (조건) {
		//실행해야되는 명령문
	}
	//─────────────────────────────────────────
	if (조건) {
		//참일때 실행되는 명령문
	}
	else {
		// 거짓일때 실행되는 명령문
	}
	//─────────────────────────────────────────
	if (조건) {
		//조건1 일때 실행되는 명령문
	}
	else if (조건) {
		// 조건2 일때 실행되는 명령문
	}
	else {
		// 조건을 만족하지 않을때 실행되는 명령문
	}
	//─────────────────────────────────────────

	// 반복문
	for (시작1, 시작2; 조건; // [증가] )
	{
		// [증가]
	}
	// 예)
	for (int i = 0, j = 10; i < 10; )
	{
		if (j == 10) {
			if (i > 0) {
				i++;
			}
		}
	}

	while (조건)
	{
		//조건이 참일때 계속 반복한다.
	}
	/*
	//함수
	리턴변수 함수이름(파라미터(0, ~10)) = 예); int num(string str, float a); // 함수 선언
	리턴변수 함수이름(파라미터(0, ~10)) = 예){ // 함수 구현
		//함수몸체
	}
	int a = 함수_사용(파라미터); // 함수호출 및 사용
	// ─────────────── 아래 사용예시 ───────────────
	int a, b;
	int add();
	int add(){			// 밑에것과 다른 오버로딩 함수 (내용이 다르기때문에)
		return (a + b);
	}
	int add(int a, int b) { // 변수에서 선언한것과 다르게 값을 받아올수 있는 파라미터
		return (a + b);
	}
	int c = add(10, 30); //
	*/

	//산술연산자
	// +, -, *, /, %
	
	//비교연산자
	//참거짓일때 사용(조건문) : a == b , a != b, a > b, a < b,  a >= b, a <= b 

	//논리연산자
	//참 or 거짓을 비교할때
	// && And 연산자 : 두 조건이 모두 참일때  참 : (a == b)true  &&  (a >= b)true  일때 참이 나온다.
	// || OR 연산자 : 두 조건 중 한가지 참일때 참 : (a == b)true  &&  (a >= b)false  일때도 참이 나온다. 
	// ! Not 연산자 : 하나의 조건임 : 조건을 반전 시킴 : !a (a가 아닐때 ture)
/*	=========== 논리연산자 표 ===========
	a		b		AND			OR			NOT(a)
	true	true	true		true		false
	true	false	false		true		
	false	true	false		true		true
	false	false	false		false
*/
/*
	//비트연산자(이진수) : 1(true), 0(false)
	&	=	AND		숫자 9를 이진법으로 = 1001
	|	=	OR
	^	=	XOR		a^b (a와 b가 다를때)
	~	=	NOT		~a
	<<	=	왼쪽으로 이동
	>>	=	오른쪽으로 이동
*/
/*
	//대입연산자 (자기 자신에게 넣을때 사용할때 사용?)
	=		:		 a = b;
	+=		:		 a += b;		 :			a = a + b;
	-=		:		 a -= b;		 :			a = a - b;
	*=		:  		 a *= b;		 :			a = a * b;
	/=		:  		 a /= b;		 :			a = a / b;
	%=		:		 a %= b;		 :			a = (a % b); 나머지 연산을 하고 그 값을 a에 대입
*/
/*
	// 증감연산자 
	++		:		 a++ , ++a
	--		:		 a-- , --a
	[]		:		 a[배열]
	()		:		 func() 함수
	.
	->
*/
	
	
